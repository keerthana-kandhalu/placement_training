1. Get three values x, y, z and write a program to print 1 if x is the middle value, 
   2 if y is the middle value and 3 if z is the middle value. Assume that all three variables (x, y, z) are distinct and have different values.

#include <stdio.h>

int main() {
   
    int x, y, z;
    printf("Enter the value of x: ");
    scanf("%d", &x);
    printf("Enter the value of y: ");
    scanf("%d", &y);
    printf("Enter the value of z: ");
    scanf("%d", &z);

    // Find the middle value
    if ((x < y && y < z) || (z < y && y < x))
        printf("1\n");
    else if ((y < x && x < z) || (z < x && x < y))
        printf("2\n");
    else
        printf("3\n");

    return 0;

2. A password is said to be strong if it satisfies the following criteria: 
It contains at least one lowercase English character. 
It contains at least one uppercase English character. 
It contains at least one special character. 
The special characters are: !@#$%^&*()-+ 
Its length is at least 8.
It contains at least one digit. Given a string, find its strength.

#include <stdio.h>
#include <string.h>
#include <ctype.h>

int is_lowercase(char ch) {
    return (ch >= 'a' && ch <= 'z');
}

int is_uppercase(char ch) {
    return (ch >= 'A' && ch <= 'Z');
}

int is_digit(char ch) {
    return (ch >= '0' && ch <= '9');
}

int is_special_char(char ch) {
    char special_chars[] = "!@#$%^&*()-+";
    for (int i = 0; i < strlen(special_chars); ++i) {
        if (ch == special_chars[i])
            return 1;
    }
    return 0;
}

int check_password_strength(char password[]) {
   
    int contains_lowercase = 0, contains_uppercase = 0, contains_digit = 0, contains_special_char = 0;

    for (int i = 0; i < strlen(password); ++i) {
        if (is_lowercase(password[i]))
            contains_lowercase = 1;
        else if (is_uppercase(password[i]))
            contains_uppercase = 1;
        else if (is_digit(password[i]))
            contains_digit = 1;
        else if (is_special_char(password[i]))
            contains_special_char = 1;
    }

    if (contains_lowercase && contains_uppercase && contains_digit && contains_special_char && strlen(password) >= 8)
        return 1; // Strong password
    else
        return 0; // Weak password
}

int main() {
    char password[50];
    printf("Enter the password: ");
    scanf("%s", password);

    if (check_password_strength(password))
        printf("Strong password\n");
    else
        printf("Weak password\n");

    return 0;
}


3. A firm creates projects for which a certain number of hours are needed. The firm has a certain number of days. 
During 10% of the days, the workers are being trained and cannot work on the project. A normal working day is 8 hours long. 
The project is important for the firm and every worker must work on it with overtime of 2 hours per day. 
The hours must be rounded down to the nearest integer (for example, 6.98 hours are rounded to 6 hours). 
Write a program that calculates whether the firm can finish the project on time and how many hours more are needed or left.

Input:
Accept three integers as input(total number of hours needed,number of days,number of workers).
Output:
If the time is enough,print "Yes!{the hours left} hours left.".
If the time is NOT enough, print "Not enough time!{additional hours} hours needed.

#include <stdio.h>

int main() {
    // Input
    int total_hours_needed, num_days, num_workers;
    printf("Enter the total number of hours needed: ");
    scanf("%d", &total_hours_needed);
    printf("Enter the number of days: ");
    scanf("%d", &num_days);
    printf("Enter the number of workers: ");
    scanf("%d", &num_workers);

    int working_hours_per_day = 8;
    int overtime_hours_per_day = 2;
    int total_working_days = (int)(num_days - (0.1 * num_days));
    int total_working_hours = total_working_days * (working_hours_per_day + overtime_hours_per_day) * num_workers;

   if (total_working_hours >= total_hours_needed) {
        int hours_left = total_working_hours - total_hours_needed;
        printf("Yes! %d hours left.\n", hours_left);
    } else {
        int additional_hours_needed = total_hours_needed - total_working_hours;
        printf("Not enough time! %d hours needed.\n", additional_hours_needed);
    }

    return 0;
}
